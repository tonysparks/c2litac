//import "io";
import "std/libc";
import "std/string_buffer";
import "std/array";
import "libclang";

func translateMacro(cursor: CXCursor) : Macro {
    var name = StringBuffer{}
    var value = StringBuffer{}

    name.init()
    value.init()

    var tokens: *CXToken = null
    var numTokens: u32 = 0;

    var transUnit = clang_Cursor_getTranslationUnit(cursor);
    var srcRange  = clang_getCursorExtent(cursor);

    clang_tokenize( transUnit, srcRange, &tokens, &numTokens );
    //defer clang_disposeTokens(transUnit, tokens, numTokens);

    for(var n: u32 = 0; n<numTokens; n += 1) {
        var tokenText = clang_getTokenSpelling( transUnit, tokens[n] );
        if(n == 0) {
            value.clear();
            name.clear();

            name.append("%s", clang_getCString(tokenText));
            if( name.get(0) == '_' ) {
                break;
            }
        }
        else {
            var tokenKind = clang_getTokenKind( tokens[n] );
            if(tokenKind != CXTokenKind.CXToken_Comment) {
                var text = clang_getCString(tokenText)
                if(text && (text[0] != '#') && strcmp(text,"typedef")) {
                    value.append("%s", text);
                }
            }
        }
    }

    if(value.size()) {
        //printf("Parsed Macro: %s, %s\n", name.cStr(), value.cStr())
        return Macro{
            .name = name.cStr(),
            .value = value.cStr()
        }
    }

    return Macro{null, null}
}

struct DeclState {
    isFirst: bool
    inType: bool
}

const state: DeclState = DeclState{
    .isFirst = false,
    .inType = false
};

struct FuncProto {
    name: *const char
    type: CXType
}

struct Macro {
    name: *const char
    value: *const char
}

var typedefs : Array<FuncProto>;
var macros : Array<Macro>;

const typeMap = [][2]*const char {
    [2]*const char {"int", "i32"},
    [2]*const char {"unsigned int", "u32"},
    [2]*const char {"unsigned char", "u8"},
    [2]*const char {"short", "i16"},
    [2]*const char {"unsigned short", "u16"},
    [2]*const char {"long", "i64"},
    [2]*const char {"unsigned long", "u64"},
    [2]*const char {"float", "f32"},
    [2]*const char {"double", "f64"},
    [2]*const char {"long long", "i64"},
    [2]*const char {"unsigned", "u32"},
    [2]*const char {"const char *", "*const char"},
    [2]*const char {"const void *", "*const void"},
    [2]*const char {"const int *", "*const int"},
    [2]*const char {"size_t", "usize"},
    [2]*const char {null, null}
};

func skipWord(str: *const char) : *const char {
    while(*str) {
        var c = *str
        if(c == ' ') {
            str += 1
            break;
        }
        str += 1
    }
    return str
}

func toLitaType(type: CXType) : *const char {
    /*var typeStr = clang_getTypedefName(type)
    //if(typeStr.data == null)
    {
        //printf("** here\n")
    }*/
    var typeStr = clang_getTypeSpelling(type)
    var cType = clang_getCString(typeStr)

    //printf("~~'%s'  \n", cType)
    //var cxStr = clang_getTypeKindSpelling(type.kind);
    //printf("KindStr: %s\n", clang_getCString(cxStr))

    switch(type.kind) {
        case CXTypeKind.CXType_FunctionNoProto:
        case CXTypeKind.CXType_FunctionProto:
        case CXTypeKind.CXType_Typedef: {
            //printf("Here!!\n")
            break;
        }
        case CXTypeKind.CXType_Elaborated: {
            //printf("Elaborated %s\n", cType)
            cType = skipWord(cType)
            break;
        }
        case CXTypeKind.CXType_Pointer: {
            var ptrType = clang_getPointeeType(type)
            var _typeStr = clang_getTypeSpelling(ptrType)
            var _cType = clang_getCString(_typeStr)

            var sb: StringBuffer;
            sb.init()

            if(clang_isConstQualifiedType(ptrType)) {
                sb.append("*const %s", toLitaType(ptrType))
            }
            else sb.append("*%s", toLitaType(ptrType))

           // printf("*** '%s'\n", sb.cStr())
            return sb.cStr()
        }
        default: {}
    }


    for(var i = 0; typeMap[i][0]; i+=1) {
        if (strcmp(cType, typeMap[i][0]) == 0) {
            return typeMap[i][1];
        }
    }

    if(clang_isConstQualifiedType(type)) {
        cType = skipWord(cType)
    }

    return cType;
}

func visitCursor(c: CXCursor, parent: CXCursor, clientData: CXClientData) : CXChildVisitResult {

    var cStr = clang_getCursorSpelling(c);
    //defer clang_disposeString(cStr);

    var kind = clang_getCursorKind(c)
    var kindStr =  clang_getCursorKindSpelling(kind);
    //defer clang_disposeString(kindStr);

    if (clang_Location_isFromMainFile(clang_getCursorLocation(c)) == 0) {
      //  printf("Cursor '%s' of kind '%s'\n", clang_getCString(cStr), clang_getCString(kindStr));
        return CXChildVisitResult.CXChildVisit_Continue;
    }

    switch(kind) {
        case CXCursorKind.CXCursor_StructDecl: {
            if(state.inType) {
                printf("}\n")
            }

            printf("\n@foreign\npublic struct %s {\n", clang_getCString(cStr))
            state.isFirst = true;
            state.inType = true;
            break;
        }

        case CXCursorKind.CXCursor_UnionDecl: {
            if(state.inType) {
                printf("}\n")
            }

            printf("\n@foreign\npublic union %s {\n", clang_getCString(cStr))
            state.isFirst = true;
            state.inType = true;
            break;
        }

        case CXCursorKind.CXCursor_EnumDecl: {
            if(state.inType) {
                printf("}\n")
            }

            printf("\n@foreign\npublic enum %s {\n", clang_getCString(cStr))
            state.isFirst = true;
            state.inType = true;
            break;
        }
        case CXCursorKind.CXCursor_FunctionDecl: {
            if(state.inType) {
                printf("}\n")
            }

            printf("\n@foreign\npublic func %s(", clang_getCString(cStr))

            var nArgs = clang_Cursor_getNumArguments(c)
            for(var i = 0; i < nArgs; i+=1) {
                var c2 = clang_Cursor_getArgument(c, i)

                var type = clang_getCursorType(c2)
                var litaStr = toLitaType(type);

                printf("p%d: %s", i, litaStr);
                if(i < nArgs - 1)  {
                    printf(", ");
                }
            }

            var funcType = clang_getCursorType(c)
            if(clang_isFunctionTypeVariadic(funcType)) {
                if(nArgs > 0) {
                    printf(", ")
                }
                printf("...");
            }

            printf(") : ");

            var retType = clang_getCursorResultType(c)
            var litaRetStr = toLitaType(retType);

            printf("%s;\n", litaRetStr);
            state.inType = false;
            break;
        }
        case CXCursorKind.CXCursor_TypedefDecl: {
            if(state.inType) {
                printf("}\n")
            }

            var name =  clang_getCString(cStr)
            var type = clang_getCursorType(c)
            if(type.kind == CXTypeKind.CXType_Typedef) {
                type = clang_getTypedefDeclUnderlyingType(c)
                if(type.kind == CXTypeKind.CXType_Pointer) {
                    type = clang_getPointeeType(type)

                    //var cxStr = clang_getTypeKindSpelling(type.kind)
                    //printf("KindStr: %s\n", clang_getCString(cxStr))

                    if(type.kind == CXTypeKind.CXType_FunctionNoProto ||
                       type.kind == CXTypeKind.CXType_FunctionProto) {

                        printf("@foreign public typedef func(")
                        var nArgs = clang_getNumArgTypes(type)
                        for(var i = 0; i < nArgs; i+=1) {
                            var argType = clang_getArgType(type, i)
                            var litaStr = toLitaType(argType);

                            printf("%s", litaStr);
                            if(i < nArgs - 1)  {
                                printf(", ");
                            }
                        }

                        if(clang_isFunctionTypeVariadic(type) && nArgs > 0) {
                            if(nArgs > 0) {
                                printf(", ")
                            }
                            printf("...");
                        }

                        printf(") : ");

                        var retType = clang_getResultType(type)
                        var litaRetStr = toLitaType(retType);

                        printf("%s as %s;\n", litaRetStr, name);
                        state.inType = false;
                        break;
                    }
                }
            }

            printf("@foreign public typedef void as %s;\n", name)
            state.inType = false;
            break;
        }

        case CXCursorKind.CXCursor_EnumConstantDecl: {
            if(!state.isFirst) {
                printf("  ,")
            }
            else {
                printf("   ")
            }
            printf("%s\n", clang_getCString(cStr))
            state.isFirst = false;
            break;
        }
        case CXCursorKind.CXCursor_FieldDecl: {
            if(!state.isFirst) {
                printf("   ")
            }
            else {
                printf("   ")
            }

            var type = clang_getCursorType(c)
            var litaStr = toLitaType(type);

            printf("%s: %s\n", clang_getCString(cStr), litaStr)
            state.isFirst = false;
            break;
        }
        case CXCursorKind.CXCursor_ParmDecl: {
            break;
        }
        case CXCursorKind.CXCursor_MacroDefinition: {
            if(clang_Cursor_isMacroBuiltin(c)) {
               return CXChildVisitResult.CXChildVisit_Continue;
            }

            var macro = translateMacro(c)
            macros.add(macro)
            break;
        }
        case CXCursorKind.CXCursor_VarDecl: {
            if(state.inType) {
                printf("}\n")
            }

            var type = clang_getCursorType(c)
            var litaStr = toLitaType(type);

            var name = clang_getCString(cStr)

            typedefs.add(FuncProto{
                .name = name,
                .type = type
            })

            printf("@foreign public var %s: %s;\n", name, litaStr)
            state.inType = false;
           // printf("Cursor '%s' of kind '%s'\n", clang_getCString(cStr), clang_getCString(kindStr));
            break;
        }
        default: {
          // printf("Cursor '%s' of kind '%s'\n", clang_getCString(cStr), clang_getCString(kindStr));
           return CXChildVisitResult.CXChildVisit_Continue;
        }
    }

    //printf("Cursor '%s' of kind '%s'\n", clang_getCString(cStr), clang_getCString(kindStr));

    return CXChildVisitResult.CXChildVisit_Recurse;
}

func printMacros() {
    for(var i = 0; i < macros.size(); i+=1) {
        var macro = macros.get(i)
        if(macro.name == null || macro.value == null) {
            printf("// empty macro!!\n")
            continue;
        }

        var isFuncProto = false
        for(var i = 0; i < typedefs.size(); i+=1) {
            var proto = typedefs.get(i)
            //printf("Proto: %s = %s\n", proto.name, )

            var typeStr = toLitaType(proto.type)
            //printf("ProtoType: %s = %s\n", proto.name, typeStr)
            if(strcmp(proto.name, macro.value) == 0) {
                printf("@foreign public const %s: %s;\n", macro.name, typeStr)
                isFuncProto = true;
                break;
            }
        }

        if(!isFuncProto) {
            printf("@foreign public const %s: i32;\n", macro.name)
        }
    }

}

const USAGE =
"""
c2litac [options] [header file]

Example:
c2litac "C:/code/someheader.h"
"""

func main(len: i32, args: **char) : i32 {
    if(len < 2) {
        printf("%s\n", USAGE);
        return 0;
    }


    var filename =
    //"C:/Users/antho/Desktop/glad.h"
    //"C:/Users/antho/Desktop/glext.h"
    //"C:/Users/antho/Desktop/gl.h"
    //"C:/Users/antho/Desktop/test.h"
    args[1]

    typedefs = Array<FuncProto> {}
    typedefs.init()

    macros = Array<Macro> {}
    macros.init()

    var index = clang_createIndex(0, 0);
    var unit = clang_parseTranslationUnit(index, filename, null, 0, null, 0,
                    CXTranslationUnit_Flags.CXTranslationUnit_SkipFunctionBodies |
                    CXTranslationUnit_Flags.CXTranslationUnit_DetailedPreprocessingRecord );
//                    CXTranslationUnit_Flags.CXTranslationUnit_SingleFileParse);

    if (!unit) {
        printf("Unable to parse translation unit. Quitting. \n");
        exit(-1);
    }

    var cursor = clang_getTranslationUnitCursor(unit);
    clang_visitChildren(cursor, visitCursor, null);

    if(state.inType) {
        printf("}\n")
    }

    printMacros();

    clang_disposeTranslationUnit(unit);
    clang_disposeIndex(index);
}